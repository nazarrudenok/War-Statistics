import telebot
from telebot import types
import fake_useragent
import requests
from bs4 import BeautifulSoup
from RussianLosses import *
from config import TOKEN
from func import losses_detaited

user = fake_useragent.UserAgent().random

headers_ = {
    'user-agent': user
}

url = 'https://russianwarship.rip/'
r = requests.get(url)

bs = BeautifulSoup(r.text, 'html.parser')

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width = 2)
    UA = types.InlineKeyboardButton('üá∫üá¶', callback_data = 'ukraine')
    EN = types.InlineKeyboardButton('üá∫üá∏', callback_data = 'america')
    markup.add(UA, EN)
    bot.send_message(message.chat.id, '–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –º–æ–≤—É\nCongratulations! Choose a language', reply_markup = markup)

@bot.message_handler(commands=['detailed_stats'])
def detailed(message):
    cht = message.chat.id
    bot.send_message(cht, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º: YYYY.MM.DD (2023.01.01)')

@bot.callback_query_handler(func = lambda call: True)
def callback(call):
    if call.message:
        if call.data == 'ukraine':
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
            
            personnel = types.KeyboardButton('–û—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥')
            tanks = types.KeyboardButton('–¢–∞–Ω–∫–∏')
            armoured_fighting_vehicles = types.KeyboardButton('–ë–ë–ú')
            planes = types.KeyboardButton('–õ—ñ—Ç–∞–∫–∏')
            helicopters = types.KeyboardButton('–ì–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä–∏')
            artillery = types.KeyboardButton('–ê—Ä—Ç–∏–ª–µ—Ä—ñ—è')
            warships = types.KeyboardButton('–ö–æ—Ä–∞–±–ª—ñ')

            markup_reply.add(personnel, tanks, armoured_fighting_vehicles, planes, helicopters, artillery, warships)

            bot.send_message(call.message.chat.id, '–Ø - –ë–æ—Ç, —â–æ —ñ–Ω—Ñ–æ—Ä–º—É—î –ª—é–¥–µ–π –ø—Ä–æ –≤—Ç—Ä–∞—Ç–∏ —Ä—Ézz–Ω—ñ!')
            bot.send_message(call.message.chat.id, '–û–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É', reply_markup = markup_reply, parse_mode='html')

        if call.data == 'america':
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
            
            personnel_en = types.KeyboardButton('Personnel')
            tanks_en = types.KeyboardButton('Tanks')
            armoured_fighting_vehicles_en = types.KeyboardButton('Armored vehicle')
            planes_en = types.KeyboardButton('Planes')
            helicopters_en = types.KeyboardButton('Helicopters')
            artillery_en = types.KeyboardButton('Artillery')
            warships_en = types.KeyboardButton('Warships')
            
            markup_reply.add(personnel_en, tanks_en, armoured_fighting_vehicles_en, planes_en, helicopters_en, artillery_en, warships_en)


            bot.send_message(call.message.chat.id, 'I am a bot that informs people about the losses of Russia!')
            bot.send_message(call.message.chat.id, 'Select the button', reply_markup = markup_reply, parse_mode='html')
        
@bot.message_handler(content_types=['text'])
def text(message):
    cht = message.chat.id
    mt = message.text
    if mt == '–û—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ –æ—Å–æ–±–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É: {personnel("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {personnel("quantity")}')
    elif mt == '–¢–∞–Ω–∫–∏':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ —Ç–∞–Ω–∫—ñ–≤: {tanks("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {tanks("quantity")}')
    elif mt == '–ë–ë–ú':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ –±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö –º–∞—à–∏–Ω: {armoured_fighting_vehicles("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {armoured_fighting_vehicles("quantity")}')
    elif mt == '–õ—ñ—Ç–∞–∫–∏':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ –ª—ñ—Ç–∞–∫—ñ–≤: {planes("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {planes("quantity")}')
    elif mt == '–ì–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä–∏':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ –≥–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä—ñ–≤: {helicopters("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {helicopters("quantity")}')
    elif mt == '–ê—Ä—Ç–∏–ª–µ—Ä—ñ—è':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ –∞—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫: {artillery_systems("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {artillery_systems("quantity")}')
    elif mt == '–ö–æ—Ä–∞–±–ª—ñ':
        bot.send_message(cht, f'–°—Ç–∞–Ω–æ–º –Ω–∞ {date()}, {day()} –¥–µ–Ω—å –≤—ñ–π–Ω–∏\n–ó–Ω–∏—â–µ–Ω–æ –∫–æ—Ä–∞–±–ª—ñ–≤: {warships("total")}\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {warships("quantity")}')
    elif '.' in mt:
        mt = mt.replace('.', '-')
        bot.send_message(cht, losses_detaited(mt))

    if mt == 'Personnel':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nPersonnel were destroyed: {personnel("total")}\nFor the last day: {personnel("quantity")}')
    elif mt == 'Tanks':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nTanks were destroyed: {tanks("total")}\nFor the last day: {tanks("quantity")}')
    elif mt == 'Armored vehicle':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nArmored vehicles were destroyed: {armoured_fighting_vehicles("total")}\nFor the last day: {armoured_fighting_vehicles("quantity")}')
    elif mt == 'Planes':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nPlanes were destroyed: {planes("total")}\nFor the last day: {planes("quantity")}')
    elif mt == 'Helicopters':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nHelicopters were destroyed: {helicopters("total")}\nFor the last day: {helicopters("quantity")}')
    elif mt == 'Artillery':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nArtillery were destroyed: {artillery_systems("total")}\nFor the last day: {artillery_systems("quantity")}')
    elif mt == 'Warships':
        bot.send_message(cht, f'As of {date()}, {day()} day of war\nWarships were destroyed: {warships("total")}\nFor the last day: {warships("quantity")}')

bot.polling()